// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace URLAutomation
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class UIMap
    {

          public string urlTextVal2;
        
        
        /// <summary>
        /// OpeningBrowser - Use 'OpeningBrowserParams' to pass parameters into this method.
        /// </summary>
        public void OpeningBrowser(string urlText)
        {
            #region Variable Declarations
            HtmlDiv uISb_footPane = this.UIBingInternetExplorerWindow.UIBingDocument.UISb_footPane;
            BrowserWindow uIBingInternetExplorerWindow = this.UIBingInternetExplorerWindow;
            urlTextVal2 = urlText;
            #endregion

            // Go to web page from file using new browser instance
            this.UIBingInternetExplorerWindow.LaunchUrl(new System.Uri(this.OpeningBrowserParams.UIBingInternetExplorerWindowUrl1));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Mouse hover 'sb_foot' pane at (1, 1)
            Mouse.Hover(uISb_footPane, new Point(1, 1));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            
           // uIBingInternetExplorerWindow.NavigateToUrl(new System.Uri(this.OpeningBrowserParams.UIBingInternetExplorerWindowUrl1));
        }
        
        #region Properties
             
        public virtual OpeningBrowserParams OpeningBrowserParams
        {
            get
            {
                if ((this.mOpeningBrowserParams == null))
                {
                    this.mOpeningBrowserParams = new OpeningBrowserParams(urlTextVal2);
                }
                return this.mOpeningBrowserParams;
            }
        }
        
        public UIBingInternetExplorerWindow UIBingInternetExplorerWindow
        {
            get
            {
                if ((this.mUIBingInternetExplorerWindow == null))
                {
                    this.mUIBingInternetExplorerWindow = new UIBingInternetExplorerWindow();
                }
                return this.mUIBingInternetExplorerWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddURLParams mAddURLParams;
        
        private OpeningBrowserParams mOpeningBrowserParams;
        
        private UIBingInternetExplorerWindow mUIBingInternetExplorerWindow;
       
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddURL'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class AddURLParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'http://www.youtube.com/'
        /// </summary>
        public string UIBingInternetExplorerWindowUrl = "http://www.youtube.com/";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpeningBrowser'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class OpeningBrowserParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'http://www.bing.com/' using new browser instance
        /// </summary>
        public string UIBingInternetExplorerWindowUrl = "http://www.bing.com/";
        
        /// <summary>
        /// Go to web page 'http://abcd.com/'
        /// </summary>
        public string UIBingInternetExplorerWindowUrl1 = "http://abcd.com/";
       private string urlTextValue;

        public OpeningBrowserParams(string urlTextVal)
        {
            // TODO: Complete member initialization
           this.urlTextValue = urlTextVal;
            UIBingInternetExplorerWindowUrl1 = urlTextValue;
        }
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIBingInternetExplorerWindow : BrowserWindow
    {
        
        public UIBingInternetExplorerWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Bing";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Bing");
            this.WindowTitles.Add("Blank Page");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIBingDocument UIBingDocument
        {
            get
            {
                if ((this.mUIBingDocument == null))
                {
                    this.mUIBingDocument = new UIBingDocument(this);
                }
                return this.mUIBingDocument;
            }
        }
        
        public UIBingTabPage UIBingTabPage
        {
            get
            {
                if ((this.mUIBingTabPage == null))
                {
                    this.mUIBingTabPage = new UIBingTabPage(this);
                }
                return this.mUIBingTabPage;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIBingDocument mUIBingDocument;
        
        private UIBingTabPage mUIBingTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "AddressDisplay Control";
            this.WindowTitles.Add("Bing");
            #endregion
        }
        
        #region Properties
        public UIAddressBarClient UIAddressBarClient
        {
            get
            {
                if ((this.mUIAddressBarClient == null))
                {
                    this.mUIAddressBarClient = new UIAddressBarClient(this);
                }
                return this.mUIAddressBarClient;
            }
        }
        #endregion
        
        #region Fields
        private UIAddressBarClient mUIAddressBarClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIAddressBarClient : WinClient
    {
        
        public UIAddressBarClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Bing");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAddressEdit
        {
            get
            {
                if ((this.mUIAddressEdit == null))
                {
                    this.mUIAddressEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAddressEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Address";
                    this.mUIAddressEdit.WindowTitles.Add("Bing");
                    #endregion
                }
                return this.mUIAddressEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAddressEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIBingDocument : HtmlDocument
    {
        
        public UIBingDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Bing";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://www.bing.com/";
            this.WindowTitles.Add("Bing");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UISb_footPane
        {
            get
            {
                if ((this.mUISb_footPane == null))
                {
                    this.mUISb_footPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUISb_footPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "sb_foot";
                    this.mUISb_footPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUISb_footPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "© 2015 Microsoft | \r\nPrivacy and Cookies";
                    this.mUISb_footPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUISb_footPane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUISb_footPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"sb_foot\" role=\"contentinfo\" data-bm=\"19\"";
                    this.mUISb_footPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "84";
                    this.mUISb_footPane.WindowTitles.Add("Bing");
                    #endregion
                }
                return this.mUISb_footPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUISb_footPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIBingTabPage : WinTabPage
    {
        
        public UIBingTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTabPage.PropertyNames.Name] = "Bing";
            this.WindowTitles.Add("Bing");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseTabCtrlWButton
        {
            get
            {
                if ((this.mUICloseTabCtrlWButton == null))
                {
                    this.mUICloseTabCtrlWButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseTabCtrlWButton.SearchProperties[WinButton.PropertyNames.Name] = "Close Tab (Ctrl+W)";
                    this.mUICloseTabCtrlWButton.WindowTitles.Add("Bing");
                    #endregion
                }
                return this.mUICloseTabCtrlWButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseTabCtrlWButton;
        #endregion
    }
}
